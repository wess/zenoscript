name: Release

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'VERSION'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build Cross-Platform Binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Build all platforms
        run: bun run compile

      - name: Build VSCode extension
        run: |
          cd vscode
          bun install
          bun run package

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Linux x64
          mkdir -p release-assets/linux-x64
          cp build/linux-x64/zeno release-assets/linux-x64/
          cp README.md LICENSE VERSION release-assets/linux-x64/ 2>/dev/null || true
          cd release-assets && tar -czf zenoscript-linux-x64.tar.gz linux-x64/ && cd ..
          
          # macOS x64 (Intel)
          mkdir -p release-assets/darwin-x64
          cp build/darwin-x64/zeno release-assets/darwin-x64/
          cp README.md LICENSE VERSION release-assets/darwin-x64/ 2>/dev/null || true
          cd release-assets && tar -czf zenoscript-darwin-x64.tar.gz darwin-x64/ && cd ..
          
          # macOS ARM64 (Apple Silicon)
          mkdir -p release-assets/darwin-arm64
          cp build/darwin-arm64/zeno release-assets/darwin-arm64/
          cp README.md LICENSE VERSION release-assets/darwin-arm64/ 2>/dev/null || true
          cd release-assets && tar -czf zenoscript-darwin-arm64.tar.gz darwin-arm64/ && cd ..
          
          # Windows x64
          mkdir -p release-assets/windows-x64
          cp build/windows-x64/zeno.exe release-assets/windows-x64/
          cp README.md LICENSE VERSION release-assets/windows-x64/ 2>/dev/null || true
          cd release-assets && zip -r zenoscript-windows-x64.zip windows-x64/ && cd ..
          
          # VSCode Extension
          cp vscode/*.vsix release-assets/
          
          # List all created assets
          ls -la release-assets/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: zenoscript-binaries
          path: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/*.vsix

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.modified, 'VERSION')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION file
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d '\n\r')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: contains(github.event.head_commit.modified, 'VERSION')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${{ steps.version.outputs.tag }}" -m "Release ${{ steps.version.outputs.version }}"
          git push origin "${{ steps.version.outputs.tag }}"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: zenoscript-binaries
          path: release-assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            Zenoscript is a functional programming language that compiles to TypeScript. This release includes standalone binaries for all major platforms.
            
            ### Download
            - **Linux x64**: `zenoscript-linux-x64.tar.gz`
            - **macOS x64 (Intel)**: `zenoscript-darwin-x64.tar.gz`
            - **macOS ARM64 (Apple Silicon)**: `zenoscript-darwin-arm64.tar.gz`
            - **Windows x64**: `zenoscript-windows-x64.zip`
            - **VSCode Extension**: `zenoscript-*.vsix`
            
            ### Installation
            
            **CLI Binary:**
            1. Download the appropriate archive for your platform
            2. Extract the archive: 
               - Linux/macOS: `tar -xzf zenoscript-*.tar.gz`
               - Windows: Extract the zip file
            3. Add the extracted directory to your PATH or copy the binary to a directory in your PATH
            4. Run `zeno --help` to get started
            
            **VSCode Extension:**
            1. Download the `zenoscript-*.vsix` file
            2. Install in VSCode: `code --install-extension zenoscript-*.vsix`
            3. Or use VSCode UI: Extensions → "..." → "Install from VSIX..."
            
            ### Quick Start
            ```bash
            # Initialize a new project
            zeno init
            
            # Setup Zenoscript in existing project  
            zeno setup
            
            # Start interactive REPL
            zeno repl
            
            # Transpile a file
            zeno input.zs output.ts
            ```
            
            ### Features
            - **Standalone binaries**: No runtime dependencies required
            - **Cross-platform**: Linux, macOS, Windows support
            - **Full CLI**: Project management, REPL, transpilation
            - **VSCode Extension**: Syntax highlighting and language support
            - **Functional programming**: Structs, traits, pattern matching, pipe operators
            - **TypeScript output**: Compile to readable TypeScript code
            
            ### Changes
            See the commit history for details about changes in this release.
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}