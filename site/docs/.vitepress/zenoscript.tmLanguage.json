{
  "name": "Zenoscript",
  "scopeName": "source.zenoscript",
  "fileTypes": ["zs"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#atoms"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#identifiers"
    },
    {
      "include": "#types"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.zenoscript",
          "match": "//.*$"
        },
        {
          "name": "comment.block.zenoscript",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.zenoscript",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.zenoscript",
              "match": "\\\\."
            },
            {
              "name": "constant.other.placeholder.zenoscript",
              "match": "\\$\\{[^}]*\\}"
            }
          ]
        },
        {
          "name": "string.quoted.single.zenoscript",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.zenoscript",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.template.zenoscript",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.zenoscript",
              "match": "\\\\."
            },
            {
              "name": "constant.other.placeholder.zenoscript",
              "match": "\\$\\{[^}]*\\}"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.zenoscript",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.zenoscript",
          "match": "\\b\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex.zenoscript",
          "match": "\\b0[xX][a-fA-F0-9]+\\b"
        },
        {
          "name": "constant.numeric.binary.zenoscript",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.octal.zenoscript",
          "match": "\\b0[oO][0-7]+\\b"
        }
      ]
    },
    "atoms": {
      "name": "constant.other.symbol.zenoscript",
      "match": ":[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.zenoscript",
          "match": "\\b(if|else|match|for|while|do|break|continue|return|yield)\\b"
        },
        {
          "name": "keyword.declaration.zenoscript",
          "match": "\\b(let|var|const|fn|struct|trait|impl|type|interface)\\b"
        },
        {
          "name": "keyword.modifier.zenoscript",
          "match": "\\b(pub|private|static|async|await|export|import|from|as|default)\\b"
        },
        {
          "name": "keyword.operator.zenoscript",
          "match": "\\b(and|or|not|in|is|as)\\b"
        },
        {
          "name": "constant.language.zenoscript",
          "match": "\\b(true|false|null|undefined|this|super)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.pipe.zenoscript",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.arrow.zenoscript",
          "match": "=>"
        },
        {
          "name": "keyword.operator.assignment.zenoscript",
          "match": "(\\+=|\\-=|\\*=|\\/=|%=|\\|=|&=|\\^=|<<=|>>=|>>>=|\\?\\?=|=)"
        },
        {
          "name": "keyword.operator.comparison.zenoscript",
          "match": "(===|!==|==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.zenoscript",
          "match": "(&&|\\|\\||!|\\?\\?)"
        },
        {
          "name": "keyword.operator.arithmetic.zenoscript",
          "match": "(\\+|\\-|\\*|\\/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.bitwise.zenoscript",
          "match": "(&|\\||\\^|~|<<|>>|>>>)"
        },
        {
          "name": "keyword.operator.increment.zenoscript",
          "match": "(\\+\\+|\\-\\-)"
        },
        {
          "name": "keyword.operator.ternary.zenoscript",
          "match": "\\?|:"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "support.type.primitive.zenoscript",
          "match": "\\b(string|number|boolean|object|symbol|bigint|void|never|unknown|any)\\b"
        },
        {
          "name": "support.type.builtin.zenoscript",
          "match": "\\b(Array|Object|Function|Promise|Date|RegExp|Error|Map|Set|WeakMap|WeakSet)\\b"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "entity.name.function.zenoscript",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*(?=\\()"
        },
        {
          "name": "entity.name.type.zenoscript",
          "match": "\\b([A-Z][a-zA-Z0-9_$]*)\\b"
        },
        {
          "name": "variable.other.zenoscript",
          "match": "\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\b"
        }
      ]
    }
  }
}